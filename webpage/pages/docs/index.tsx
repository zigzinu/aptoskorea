import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import matter from "gray-matter";
import fs from "fs";
import path from "path";
import Link from "next/link";
import md from 'markdown-it';

interface DocsProps {
  title: string;
  content: string;
}

interface Post {
  slug: string;
  frontmatter: {
    title: string;
    metaTitle: string;
    metaDesc: string;
    image: string;
    date: string;
    tags: string[];
    socialImage: string;
  }
  content: any;
}

const Docs: NextPage<DocsProps> = ({ content }) => {
  console.log("posts", content);
  const sidebar = true;
  // const firstFrontmatter = posts[0].frontmatter;
  // const firstContent = posts[0].content;
  return (
    <div>
      <Head>
        <title>Docs | AptosKorea</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1 className="text-3xl font-bold underline">Documents</h1>
        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 p-4 md:p-0">
          {/* {posts.map(({ slug, frontmatter }) => (
            <div
              key={slug}
              className="border border-gray-200 m-2 rounded-xl shadow-lg overflow-hidden flex flex-col"
            >
              <Link href={`/post/${slug}`}>
                <a>
                  <Image
                    width={650}
                    height={340}
                    alt={frontmatter.title}
                    src={`/images/${frontmatter.socialImage}`}
                  />
                  <h1 className="p-4">{frontmatter.title}</h1>
                </a>
              </Link>
            </div>
          ))} */}
        </div>
        <article className='prose mx-auto max-w-max'>
          {/* <h1>{firstFrontmatter.title}</h1> */}
          <div dangerouslySetInnerHTML={{ __html: md().render(content) }} />
        </article>
      </main>
    </div>
  );
};

function parseFiles(directory: string): object {
  const files = fs.readdirSync(directory, { withFileTypes: true });
  console.log('files', files)
  const resultArr = [];
  for (const file of files) {
    if (file.isDirectory()) { 
      resultArr.push(parseFiles(directory + '/' + file.name));
    } else if (file.isFile() && path.extname(file.name) == ".md") {
      // resultArr.push(path.parse(file.name).name.replaceAll("_", " ")); // A_B_C.md => A B C
      resultArr.push(file.name); // A_B_C.md => A B C
    }
  }
  return {
    [directory]: resultArr
  };
}


export function getStaticProps() {
  const readFile = fs.readFileSync(`posts/sample.md`, "utf-8");
  const { data: frontmatter, content } = matter(readFile);
  return {
    props: {
      content
    }
  }
  const files = parseFiles("posts");
  console.log(JSON.stringify(files, undefined, 2));
  
  const posts = files.map((file) => {
    console.log(file.isDirectory(), file.isFile());
    const slug = fileName.replace(".md", "");
    const readFile = fs.readFileSync(`posts/${fileName}`, "utf-8");
    const { data: frontmatter, content } = matter(readFile);

    return {
      slug,
      frontmatter,
      content,
    };
  });
  return {
    props: {
      files,
    },
  };
  // Get all our posts
}

export default Docs;
